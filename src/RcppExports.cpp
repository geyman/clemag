// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// clean_mrk
DataFrame clean_mrk(RObject data, Nullable<NumericVector> na_freq, bool rm_mono, Nullable<NumericVector> maf, bool recode, bool rm_dupes, Nullable<CharacterVector> keep, bool impute, CharacterVector homo, CharacterVector hetero, int homo_num_min, int homo_num_maj, int hetero_num, bool row_names, bool verbose);
RcppExport SEXP _clemag_clean_mrk(SEXP dataSEXP, SEXP na_freqSEXP, SEXP rm_monoSEXP, SEXP mafSEXP, SEXP recodeSEXP, SEXP rm_dupesSEXP, SEXP keepSEXP, SEXP imputeSEXP, SEXP homoSEXP, SEXP heteroSEXP, SEXP homo_num_minSEXP, SEXP homo_num_majSEXP, SEXP hetero_numSEXP, SEXP row_namesSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type na_freq(na_freqSEXP);
    Rcpp::traits::input_parameter< bool >::type rm_mono(rm_monoSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type maf(mafSEXP);
    Rcpp::traits::input_parameter< bool >::type recode(recodeSEXP);
    Rcpp::traits::input_parameter< bool >::type rm_dupes(rm_dupesSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< bool >::type impute(imputeSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type homo(homoSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type hetero(heteroSEXP);
    Rcpp::traits::input_parameter< int >::type homo_num_min(homo_num_minSEXP);
    Rcpp::traits::input_parameter< int >::type homo_num_maj(homo_num_majSEXP);
    Rcpp::traits::input_parameter< int >::type hetero_num(hetero_numSEXP);
    Rcpp::traits::input_parameter< bool >::type row_names(row_namesSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(clean_mrk(data, na_freq, rm_mono, maf, recode, rm_dupes, keep, impute, homo, hetero, homo_num_min, homo_num_maj, hetero_num, row_names, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_clemag_clean_mrk", (DL_FUNC) &_clemag_clean_mrk, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_clemag(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
